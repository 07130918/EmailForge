'use client';
import type { MailTarget } from '@/types';
import {
    Box,
    Button,
    HStack,
    Input,
    Link,
    Modal,
    ModalBody,
    ModalCloseButton,
    ModalContent,
    ModalHeader,
    ModalOverlay,
    Select,
    Spacer,
    Stack,
    Text,
    Textarea,
    VStack,
    useClipboard,
    useDisclosure,
} from '@chakra-ui/react';
import type { ChangeEvent } from 'react';
import { useState } from 'react';

const samples: MailTarget[] = [
    {
        type: 'sales',
        industry: 'IT',
        age: '20代後半から40代前半',
        position: 'エンジニア',
        summary: '最新のクラウドソリューションをご紹介',
    },
    {
        type: 'support',
        industry: '製造業',
        age: '30代後半から50代前半',
        position: '製品開発マネージャー',
        summary: '製品不具合のお詫びと対応策のご案内',
    },
    {
        type: 'newsletter',
        industry: '教育',
        age: '30代前半',
        position: '教育コンサルタント',
        summary: '最新の教育技術トレンドレポート',
    },
];

export default function Home() {
    const [result, setResult] = useState<string>('');
    const [reading = false, setReading] = useState<boolean>(false);
    // メールの種類の状態を追跡
    const [formState, setFormState] = useState<MailTarget>({
        type: '',
        industry: '',
        age: '',
        position: '',
        summary: '',
    });

    const { isOpen, onOpen, onClose } = useDisclosure();
    const { onCopy, hasCopied } = useClipboard(result);

    const setSample = (sampleData: MailTarget) => {
        setFormState(sampleData);
    };

    const handleChange = (
        e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>,
    ) => {
        setFormState({
            ...formState,
            [e.target.name]: e.target.value,
        });
    };

    const handleSubmit = async () => {
        setResult('');
        setReading(true);

        // NOTE: fetchじゃないとストリームを受け取れない
        const response = await fetch('/api/email-text', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formState),
        });
        if (!response.ok || response.body == null) {
            throw new Error('Network error');
        }

        const reader = response.body.getReader();
        const decoder = new TextDecoder();

        // ストリームの読み取り
        reader.read().then(function processText({ done, value }): Promise<void | undefined> | void {
            if (done) {
                setReading(false);
                return;
            }

            const chunk = decoder.decode(value, { stream: true });
            setResult((prev) => prev + chunk);
            return reader.read().then(processText);
        });
    };

    return (
        <>
            <Modal isOpen={isOpen} onClose={onClose} size='lg'>
                <ModalOverlay />
                <ModalContent bg='#272D33' color='#FFF'>
                    <ModalHeader>免責事項</ModalHeader>
                    <ModalCloseButton />
                    <ModalBody maxH='75vh' overflowY='auto'>
                        <Text>
                            This web application provides a service that automatically generates
                            email content based on the information provided by the user, through the
                            API provided by OpenAI.
                        </Text>
                        <Text>
                            No guarantees are made regarding the accuracy, appropriateness, or
                            usefulness of the generated email content or any other content.
                        </Text>
                        <Text>
                            The service and its developers bear no responsibility for any direct or
                            indirect damage, disadvantage, or issues arising from the use of the
                            generated content.
                        </Text>
                        <Text>
                            Users are advised to use the service at their own discretion and risk.
                        </Text>
                        <Text>
                            Content generated by the AI should be considered as a reference only,
                            and users should verify and adjust the content before its final use.
                        </Text>
                        <Text>
                            All responsibilities related to legal issues, third-party rights
                            infringement, or inappropriate expressions in the generated content fall
                            upon the user.
                        </Text>
                        <Text mb={4}>
                            The developers bear no responsibility for any problems arising from the
                            use of this service.
                        </Text>

                        <Box borderBottomWidth='1px' borderBottomColor='white' my={4} />

                        <Text>
                            本ウェブアプリケーションは、ユーザーが入力した情報を基にOpenAI社が提供するAPIを通してメール本文を自動生成するサービスを提供しています。
                        </Text>
                        <Text>
                            生成されたメール本文やその他のコンテンツについて、その正確性、適切さ、有用性などに関して一切の保証を行うものではありません。
                        </Text>
                        <Text>
                            また、生成された内容を利用したことによる直接的または間接的な損害、不利益、トラブルなどについて、当サービスおよび開発者は一切の責任を負いません。
                        </Text>
                        <Text>ユーザー自身の判断と責任においてサービスをご利用ください。</Text>
                        <Text>
                            AIによって生成されたコンテンツは、あくまで参考程度としてお考えいただき、最終的な使用前には内容の確認と適宜の修正を行ってください。
                        </Text>
                        <Text>
                            法律上の問題、第三者の権利侵害、不適切な表現など、生成された内容に関する一切の責任は利用者に帰属します。
                        </Text>
                        <Text>
                            本サービスの利用により生じたいかなる問題についても、開発者は責任を負いません。
                        </Text>
                    </ModalBody>
                </ModalContent>
            </Modal>

            <Box minH='100vh' bg='#161918'>
                <HStack
                    as='header'
                    width='full'
                    bgGradient='linear(135deg, #00c8ff, #1f7bc2, #00155c)'
                    p={4}
                    justifyContent='space-between'
                    alignItems='center'
                >
                    <Text fontSize='xl' color='white' fontWeight='bold' pl={5}>
                        EmailForge
                    </Text>
                    <Text color='white' pr={5}>
                        Creating awesome emails are not rocket science 🚀
                    </Text>
                </HStack>
                <Stack direction={{ base: 'column', md: 'row' }} p={8} spacing={6} align='start'>
                    <VStack spacing={4} flex='1' w='100%'>
                        <Select
                            name='type'
                            placeholder='メールの種類を選択'
                            bg='#272D33'
                            color='#F7FAFC'
                            borderColor='#4A5568'
                            value={formState.type}
                            onChange={handleChange}
                        >
                            <option value='sales'>営業メール</option>
                            <option value='support'>カスタマーサポート/サービスメール</option>
                            <option value='newsletter'>ニュースレター</option>
                            <option value='thankYou'>感謝や祝賀のメール</option>
                            <option value='invitation'>招待メール</option>
                            <option value='other'>その他</option>
                        </Select>
                        {formState.type === 'other' && (
                            <Input
                                name='mailType'
                                placeholder='メールの種類を入力'
                                bg='#272D33'
                                color='#FFF'
                                borderColor='#4A5568'
                                value={formState.type}
                                onChange={handleChange}
                            />
                        )}
                        <Input
                            name='industry'
                            placeholder='業界(例: IT、金融、製造業)'
                            bg='#272D33'
                            color='#FFF'
                            borderColor='#4A5568'
                            value={formState.industry}
                            onChange={handleChange}
                        />
                        <Input
                            name='age'
                            placeholder='年齢 (例: 20代後半から30代前半)'
                            bg='#272D33'
                            color='#FFF'
                            borderColor='#4A5568'
                            value={formState.age}
                            onChange={handleChange}
                        />
                        <Input
                            name='position'
                            placeholder='受信者の役職/属性（例：マネージャー、エンジニア、学生）'
                            bg='#272D33'
                            color='#FFF'
                            borderColor='#4A5568'
                            value={formState.position}
                            onChange={handleChange}
                        />
                        <Textarea
                            name='summary'
                            placeholder='メールの概要を簡潔に入力してください。'
                            bg='#272D33'
                            color='#FFF'
                            borderColor='#4A5568'
                            resize='none'
                            rows={4}
                            value={formState.summary}
                            onChange={handleChange}
                        />
                        <HStack w='full'>
                            <Spacer />
                            <Button
                                colorScheme='gray'
                                isDisabled={reading}
                                size='lg'
                                onClick={handleSubmit}
                            >
                                生成する
                            </Button>
                        </HStack>
                        <Box borderColor='#4A5568' bg='#272D33' p={4} borderRadius='md' w='100%'>
                            <Text color='#FFF' pb={4}>
                                サンプルから生成する
                            </Text>
                            {samples.map((sample, i) => (
                                <Button
                                    key={i}
                                    colorScheme='teal'
                                    minH={12}
                                    w='100%'
                                    onClick={() => setSample(sample)}
                                    my={1}
                                >
                                    <Text>{sample.summary}</Text>
                                </Button>
                            ))}
                        </Box>
                    </VStack>
                    <Box flex='1' borderColor='#4A5568' bg='#272D33' p={4} borderRadius='md'>
                        <HStack borderColor='#4A5568'>
                            <Text fontSize='lg' fontWeight='bold' color='#FFF'>
                                生成結果:
                            </Text>
                            <Spacer />
                            <Button onClick={onCopy}>{hasCopied ? 'Copied!' : 'Copy'}</Button>
                        </HStack>
                        <Text whiteSpace='pre-wrap' color='#FFF'>
                            {result}
                        </Text>
                    </Box>
                </Stack>
                <Box mt={20} py={4} borderColor='#FFF' borderTopWidth='1px' bg='#161918'>
                    <HStack spacing={4} justifyContent='flex-start' pl={4}>
                        <Link
                            href='https://hi-there-this-is-kota.vercel.app'
                            isExternal
                            color='#FFF'
                            fontSize='sm'
                            _hover={{ color: '#00c8ff' }}
                        >
                            Developer&apos;s Website
                        </Link>
                        <Link
                            href='https://github.com/07130918/EmailForge/issues/new'
                            isExternal
                            color='#FFF'
                            fontSize='sm'
                            _hover={{ color: '#00c8ff' }}
                        >
                            Report a Bug
                        </Link>
                        <Button
                            color='#FFF'
                            variant='ghost'
                            size='sm'
                            _hover={{ color: '#00c8ff' }}
                            onClick={onOpen}
                        >
                            免責事項/Disclaimer
                        </Button>
                    </HStack>
                </Box>
            </Box>
        </>
    );
}
